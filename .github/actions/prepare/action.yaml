name: Prepare

description: Prepare prerequisites for subsequent jobs in the workflow

inputs:
  project:
    description: The project to prepare for
    required: true

outputs:
  environment:
    description: The environment to deploy to
    value: ${{ inputs.project }} ${{ github.ref_name == github.event.repository.default_branch && '(production)' || '(preview)' }}
  needs-deploy:
    description: Whether the project needs to be deployed
    value: ${{ steps.set-needs-deploy.outputs.needs-deploy }}

runs:
  using: composite
  steps:
    # Check the commit message prefix following the default release rules of the commit-analyzer plugin for semantic-release to determine whether the project needs to be deployed. For more information, see https://github.com/semantic-release/commit-analyzer#default-rules-matching.
    # The commit messages with one or more scopes are checked against the project name.
    - id: set-needs-deploy
      name: Set output needs-deploy
      run: |
        echo "github.sha: $GITHUB_SHA"
        echo "github.ref: $GITHUB_REF"
        echo "github.base_ref: $GITHUB_BASE_REF"
        echo "github.head_ref: $GITHUB_HEAD_REF"
        echo "github.event.pull_request.base.ref: ${{ github.event.pull_request.base.ref }}"
        echo "github.event.pull_request.head.ref: ${{ github.event.pull_request.head.ref }}"
        echo "github.event.before: ${{ github.event.before }}"
        echo "github.event.after: ${{ github.event.after }}"

        git branch --all --verbose --verbose

        mapfile -t messages < <(git log --pretty=format:"%s" "$BASE..$HEAD")

        for message in "${messages[@]}"; do
          prefix="${message%%:*}"
          type="${prefix%%[(!]*}"
          mapfile -t scopes < <(awk -F '[()]' '{print $2}' <<< "$prefix" | awk -F '[/\\\\,]' '{ for (i = 1; i <= NF; i++) print $i }' | awk '{$1=$1};1')

          for scope in "${scopes[@]}"; do
            if [[ $scope == 'no-release' ]]; then
              continue 2
            fi
          done

          if [[ $prefix =~ !$ || $type =~ ^(feat|fix|perf)$ ]]; then
            for scope in "${scopes[@]}"; do
              if [[ $scope == "$PROJECT" ]]; then
                echo 'needs-deploy=true' >> "$GITHUB_OUTPUT"

                exit 0
              fi
            done
          fi
        done

        echo 'needs-deploy=false' >> "$GITHUB_OUTPUT"
      shell: bash
      env:
        PROJECT: ${{ inputs.project }}
        BASE: origin/${{ github.event.pull_request.base.ref || github.event.before }}
        HEAD: origin/${{ github.event.pull_request.head.ref || github.event.after }}
